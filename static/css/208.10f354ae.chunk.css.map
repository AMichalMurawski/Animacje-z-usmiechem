{"version":3,"file":"static/css/208.10f354ae.chunk.css","mappings":"AAEA,8BAEE,4DADA,iBACA,CAEA,sCAEE,YADA,UACA,CCgFA,oCDlFF,sCAKI,aADA,WACA,EAIJ,sCAEE,YADA,UACA,CCuEA,oCDzEF,sCAMI,YADA,UACA,EAIJ,qCAEE,aADA,WACA,CAGF,qCAEE,YADA,UACA,CEhCJ,iCAOE,WADA,aAHA,SAFA,kBACA,QAEA,sEACA,WAEA,CCEF,mCAIE,cAFA,iBADA,gBAIA,aAFA,UAEA,CCZF,uCCiGI,eAdE,eDlFe,CCkHjB,oBDlHiC,CCyGjC,eDzG4B,CAG9B,mBADA,eADA,iBAEA,CAGF,yCC0FI,eAdE,eD3Ee,CC2GjB,qBATA,eDlGiC,CH8EjC,oCG/EJ,yCC0FI,gBDnFF,6DACE,gBEdJ,qCACE,mBAEA,8CACE,gBAIJ,gCACE,yBAEA,uCDqFE,eAdE,eCtEiB,CDsGnB,qBATA,eC7FmC,CAEnC,2DACE,eClBN,MACE,mBAAqB,CACrB,sBAAwB,CAExB,qCAAuC,CAEvC,sBAAiC,CACjC,wBAAoC,CAEpC,oBAAgC,CAChC,sBAAkC,CAElC,0EAIA,8EAKA,wBAAoC,CPnBtC,uBAEE,4DADA,iBACA,CAEA,+BAEE,YADA,UACA,CCgFA,oCDlFF,+BAKI,aADA,WACA,EAIJ,gCAEE,YADA,UACA,CCuEA,oCDzEF,gCAMI,YADA,UACA,EAIJ,8BAEE,aADA,WACA,CAGF,8BAEE,YADA,UACA,CEhCJ,0BAOE,WADA,aAHA,SAFA,kBACA,QAEA,sEACA,WAEA,CCPF,EAEE,cADA,oBACA,CAGF,GACE,gBAGF,6BAIE,cAFA,iBADA,gBAIA,aAFA,UAEA,CCZF,gCCiGI,eAdE,eDlFe,CCkHjB,oBDlHiC,CCyGjC,eDzG4B,CAG9B,mBADA,eADA,iBAEA,CAGF,kCC0FI,eAdE,eD3Ee,CC2GjB,qBATA,eDlGiC,CH8EjC,oCG/EJ,kCC0FI,gBDnFF,sDACE,gBIdJ,wBCkFE,aAEE,cDnFoB,CC0FpB,QD1F0B,CC4G1B,0BD5GgC,CPoFhC,oCOrFJ,wBCkFE,aAIE,kBDlFsB,CCuFtB,QDvF2B,CCyG3B,sBDzGiC,EAGnC,8BC2GE,kBD1GyC,CC0E3C,aAiDE,4BA7CA,kBD9EsB,CCmFtB,QDnF2B,CCqG3B,sBAsBA,CR9CA,oCO9EF,8BC2EA,aA2BE,0BDjGoC,EPiFpC,yDOtFF,8BC4HE,mCR9CA,oCO9EF,8BC2GE,kBD/F4C,CC+D9C,aAiDE,6BA7CA,qBDnEwB,CCwExB,QAwCA,ED3GF,8BACE,aP4DA,oCO7DF,8BAOI,sBADA,kBAHA,cAEA,YADA,UAGA,EPsDF,oCO7DF,8BAYI,YADA,UACA,EPiDF,oCO7DF,8BAiBI,YADA,UACA,EAIJ,8BACE,kBPuCA,oCOxCF,8BAII,kBAIJ,gCAEE,wCADA,eACA","sources":["scss/components/_logo.scss","scss/utils/_media.scss","scss/components/_spinner.scss","scss/components/_global.scss","scss/components/_text.scss","scss/utils/_font.scss","components/OfferDescription/OfferDescription.module.scss","scss/utils/_colors.scss","components/OfferList/OfferList.module.scss","scss/utils/_flex.scss"],"sourcesContent":["@use '../utils/utils' as *;\n\n.logo {\n  border-radius: 50%;\n  background-color: var(--bg-primary);\n\n  &__header {\n    width: 60px;\n    height: 60px;\n    @include media-mapp(tablet) {\n      width: 100px;\n      height: 100px;\n    }\n  }\n\n  &__footer {\n    width: 60px;\n    height: 60px;\n\n    @include media-mapp('tablet') {\n      width: 70px;\n      height: 70px;\n    }\n  }\n\n  &__modal {\n    width: 150px;\n    height: 150px;\n  }\n\n  &__image {\n    width: 100%;\n    height: 100%;\n  }\n}\n","// Użycie:\n//   @include media-mapp($breakpoint1, $breakpoint2)\n//   gdzie:\n//     $breakpoint1 - wartość dla media (min-width: value)\n//     $breakpoint2 - wartość dla media (max-width: value)\n//     jako $breakpoint1 / $breakpoint2 użyj wartości z $breakpoint('mobile', 'tablet', 'desktop') lub wprowadź wartość ręcznie\n//     jeżeli $breakpoint1 / $breakpoint2 jest niepotrzebny wprowadź null\n//     jako jednostek można używać px, em, rem\n\n// Przykłdy użycia:\n//   .selektor {\n//     background-color: grey;\n\n//     dla mediów do 768px wprowadzonych jako 'medium'\n//       @include media-mapp(null, 'tablet') {\n//         background-color: green;\n//       };\n\n//     dla mediów od 800px do 1200px wprowadzonych jako wartość i 'large'\n//       @include media-mapp(800px, 'desktop') {\n//         background-color: blue;\n//       };\n\n//     dla mediów od 1200px wprowadzonych jako wartość w rem (dla html font-size:16px) i px (oba zapisy są poprawne, można pomijać null na końcu)\n//       @include media-mapp(75rem, null) {\n//         background-color: red;\n//       };\n//       @include media-mapp(1200px) {\n//         background-color: red;\n//       };\n\n//     błedy wprowadzenia - wygeneruje gradient w biało-czerwone paski\n//       @include media-mapp(null, null) {\n//         background-color: yellow;\n//       };\n//       @include media-mapp(null) {\n//         background-color: yellow;\n//       };\n//       @include media-mapp() {\n//         background-color: yellow;\n//       };\n//       @include media-mapp(480, 1200abc) {\n//         background-color: yellow;\n//       };\n//   }\n\n@import './error';\n\n$breakpoint: (\n  'mobile': 480px,\n  'tablet': 768px,\n  'desktop': 1200px,\n  'high': 1500px,\n);\n\n@function getBreakpoint($var) {\n  @return map-get($breakpoint, $var);\n}\n\n@mixin mapp($breakpoint1: null, $breakpoint2: null) {\n  $media-min: 0;\n  $media-max: 0;\n\n  @if type-of($breakpoint1) == 'number' {\n    $media-min: $breakpoint1;\n    @if index('px' 'em' 'rem', unit($media-min)) == null {\n      $media-min: 0;\n    }\n  } @else {\n    $media-min: getBreakpoint($breakpoint1);\n    @if type-of($media-min) != 'number' {\n      $media-min: 0;\n    }\n  }\n\n  @if type-of($breakpoint2) == 'number' {\n    $media-max: $breakpoint2;\n    @if index('px' 'em' 'rem', unit($media-max)) == null {\n      $media-max: 0;\n    }\n  } @else {\n    $media-max: getBreakpoint($breakpoint2);\n    @if type-of($media-max) != 'number' {\n      $media-max: 0;\n    }\n  }\n\n  @if ($media-min != 0 and $media-max == 0) {\n    @media screen and (min-width: $media-min) {\n      @content;\n    }\n  } @else if ($media-min == 0 and $media-max != 0) {\n    @media screen and (max-width: $media-max) {\n      @content;\n    }\n  } @else if ($media-min != 0 and $media-max != 0) {\n    @media screen and (min-width: $media-min) and (max-width: $media-max) {\n      @content;\n    }\n  } @else {\n    @media screen and (max-width: 1px) {\n      @content;\n    }\n  }\n}\n",".spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 160px;\n  height: 160px;\n  color: plum;\n}\n","a {\n  text-decoration: none;\n  color: inherit;\n}\n\nul {\n  list-style: none;\n}\n\n.container {\n  min-width: 320px;\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 15px;\n}\n","@use '../utils/utils' as *;\n\n.heading-third {\n  @include font-type(700, 24px, 1.2, 0.04em);\n  text-align: center;\n  padding: 15px 0;\n  margin-bottom: 15px;\n}\n\n.paragraph-first {\n  @include font-type(400, 14px, 1.2, 0.03em);\n\n  @include media-mapp(tablet) {\n    @include font-type(null, 16px);\n  }\n\n  &:not(:first-of-type) {\n    margin-top: 20px;\n  }\n}\n","// Sposób użycia:\n//   @include font-type($weight, $size, $height, $spacing)\n//     gdzie:\n//       $weight - wartość font-weight w jednostkach 100-900\n//       $size - wartość font-size w px / em / rem\n//       $height - wartość line-height w mnożniku\n//       $spacing - wartość letter-spacing w jednostkach em\n//     Wszystkie zmienne są opcjonalne.\n//       Jeśli nie ma potrzeby użyć zmiennej należy wprowadzić wartość null.\n//       Jeśli nie używane są ostatnie zmienne można nie wprowadzać wartości.\n\n// Przykłady użycia:\n//   == letter-spacing takie samo jak w body / przodku\n//     .selektor {\n//       @include font-type(700, 32px, 1.5)\n//     }\n\n//   == font-weight i line-height takie samo jak w body / przodku\n//     .selektor {\n//       @include font-type(null, text-large, null, 0.02em)\n//     }\n\n//   == wszystkie elementy czcionki wprowadzone jako zmienne [nie zalecane używanie]\n//     .selektor {\n//       @include font-type(bold, header-normal, medium, large)\n//     }\n\n@import './error';\n\n$fontWeight: (\n  'normal': 400,\n  'medium': 500,\n  'bold': 700,\n  'black': 900,\n);\n@function getWeight($val) {\n  @return map-get($fontWeight, $val);\n}\n\n$fontSize: (\n  'text-little': 12px,\n  'text-small': 14px,\n  'text-normal': 16px,\n  'text-medium': 18px,\n  'text-big': 20px,\n  'text-height': 24px,\n  'text-large': 28px,\n  'header-normal': 32px,\n  'header-medium': 36px,\n  'header-big': 40px,\n  'header-height': 48px,\n  'header-large': 60px,\n);\n@function getSize($val) {\n  @return map-get($fontSize, $val);\n}\n\n$fontHeight: (\n  'little': 1.13,\n  'small': 1.25,\n  'normal': 1.5,\n  'medium': 1.75,\n  'big': 2,\n  'height': 2.5,\n  'large': 3,\n);\n@function getHeight($val) {\n  @return map-get($fontHeight, $val);\n}\n\n$fontSpacing: (\n  'small': 0.02em,\n  'normal': 0.03em,\n  'medium': 0.04em,\n  'big': 0.05em,\n  'large': 0.06em,\n);\n@function getSpacing($val) {\n  @return map-get($fontSpacing, $val);\n}\n\n@mixin type($weight: null, $size: null, $height: null, $spacing: null) {\n  $fontWeights: (100, 200, 300, 400, 500, 600, 700, 800, 900);\n  @if type-of($weight) == 'number' and index('', unit($weight)) {\n    @if index($fontWeights, $weight) {\n      font-weight: $weight;\n    } @else {\n      @include error('errText');\n    }\n  } @else {\n    @if #{getWeight($weight)} != '' {\n      font-weight: #{getWeight($weight)};\n    } @else if $weight == null {\n    } @else {\n      @include error('errText');\n    }\n  }\n\n  @if type-of($size) == 'number' and index('px' 'em' 'rem', unit($size)) {\n    font-size: #{$size};\n  } @else if #{getSize($size)} != '' {\n    font-size: getSize($size);\n  } @else if $size == null {\n  } @else {\n    @include error('errText');\n  }\n\n  @if type-of($height) == 'number' and index('', unit($height)) {\n    line-height: $height;\n  } @else if #{getHeight($height)} != '' {\n    line-height: getHeight($height);\n  } @else if $height == null {\n  } @else {\n    @include error('errText');\n  }\n\n  @if type-of($spacing) == 'number' and index('em', unit($spacing)) {\n    letter-spacing: $spacing;\n  } @else if #{getSpacing($spacing)} != '' {\n    letter-spacing: getSpacing($spacing);\n  } @else if $spacing == null {\n  } @else {\n    @include error('errText');\n  }\n}\n","@use 'scss/components/components' as *;\n@use 'scss/utils/utils' as *;\n\n.description {\n  margin-bottom: 30px;\n\n  &__heading {\n    text-align: left;\n  }\n}\n\n.option {\n  list-style: inside circle;\n\n  &__item {\n    @include font-type(400, 16px, 1.2, 0.03em);\n\n    &:not(:first-of-type) {\n      margin-top: 5px;\n    }\n  }\n}\n",":root {\n  --text-primary: black;\n  --text-alernative: white;\n\n  --textShadow-primary: 2px 2px 2px black;\n\n  --link-primary: rgb(193, 152, 30);\n  --link-secondary: rgb(255, 229, 151);\n\n  --bg-primary: rgb(255, 247, 224);\n  --bg-secondary: rgb(248, 236, 198);\n\n  --bgShadow-primary: linear-gradient(\n    rgba(175, 174, 173, 0.3),\n    rgba(175, 174, 173, 0.3)\n  );\n  --bgShadow-secondary: linear-gradient(\n    rgba(175, 174, 173, 0.15),\n    rgba(175, 174, 173, 0.15)\n  );\n\n  --border-primary: rgb(255, 220, 107);\n}\n","@use 'scss/components/components' as *;\n@use 'scss/utils/utils' as *;\n\n.offer {\n  @include flex-display(wrap, 30px, flex-start);\n\n  @include media-mapp(tablet) {\n    @include flex-display(row, 60px, center);\n  }\n\n  &__item {\n    @include flex-display(row, 15px, center, center);\n    @include flex-basis(2, 30px);\n\n    @include media-mapp(360px) {\n      @include flex-display(null, null, flex-start);\n    }\n\n    @include media-mapp(550px, tablet) {\n      @include flex-basis(3, 30px);\n    }\n    @include media-mapp(tablet) {\n      @include flex-display(column, 15px, null, center);\n      @include flex-basis(10, 1px);\n    }\n  }\n\n  &__icon {\n    display: none;\n    @include media-mapp(360px) {\n      display: block;\n      width: 50px;\n      height: 50px;\n      border-radius: 50%;\n      background-color: white;\n    }\n\n    @include media-mapp(550px) {\n      width: 65px;\n      height: 65px;\n    }\n\n    @include media-mapp(tablet) {\n      width: 80px;\n      height: 80px;\n    }\n  }\n\n  &__name {\n    text-align: center;\n\n    @include media-mapp(360px) {\n      text-align: start;\n    }\n  }\n\n  &__active {\n    font-weight: 700;\n    color: var(--link-primary);\n  }\n}\n","// Sposób użycia:\n//   w klasie kontenera:\n//     @include flex-display($direction, $gapVal, $justify, $align, $gapRow, $gapCol)\n//       gdzie:\n//         $direction - kierunek rozmieszczenia elementów (none, wrap, row, column)\n//         $gapVal - wartość właściwości gap (value, null)\n//         $justify - opcjonalne rozmieszczenie wzdłuż głównej osi (wartości justify-content)\n//         $align - opcjonalne rozmieszczenie wzdłuż osi poprzecznej (wartości aling-items),\n//                 aby podać wartość $align należy podać wartość $justify (przynajmniej null)\n//         $gapRow - wartość właściwości row-gap (value, null)\n//         $gapCol - wartość właściwości column-gap (value, null)\n\n//   w klasie elementu [dla użytego w rodzicu @include flex(wrap, $gapVal, ...)]:\n//     @include flex-basis($elementNr, $gapVal)\n//       gdzie:\n//         $elementNr - ilość elementów w linii\n//         $gapVal - wartość $gapVal rodzica\n\n// Przykłady użycia:\n//   dla siatki elementów:\n//     .selektor-rodzic {\n//       @include flex-display(wrap, 30px);\n//     }\n//     .selektor-element {\n//       @include flex-basis(4, 30px);\n//     }\n\n//   dla rozmieszczenia w linii poziomej wycentrowane tylko w poziomie:\n//     .selektor-rodzic {\n//       @include flex-display(row, 50px, null, center);\n//     }\n\n//   dla rozmieszczenia w linii pionowej wycentrowane tylko w pionie:\n//     .selektor-rodzic {\n//       @include flex-display(column, 40px, center);\n//     }\n\n// Zaleca się dla elementów, które będą siatką w mediach dla tabletów i desktopów\n//   użyć również dla komórek $direction: wrap i dla elementów podać $elementNr: 1.\n//   Pozwoli to na nieduplikowanie @include flex() w rodzicu.\n//   Warunkiem jest aby wartość gap była stała dla wszystkich mediów.\n\n@import './error';\n\n$justifyContent: (\n  null,\n  center,\n  space-between,\n  space-around,\n  start,\n  end,\n  flex-start,\n  flex-end,\n  left right\n);\n\n$alignItems: (\n  null,\n  normal,\n  stretch,\n  center,\n  start,\n  end,\n  flex-start,\n  flex-end,\n  baseline,\n  first baseline,\n  last baseline,\n  safe center,\n  unsafe center,\n  inherit,\n  initial,\n  revert,\n  revert-layer,\n  unset\n);\n\n@mixin display(\n  $direction: null,\n  $gapVal: null,\n  $justify: null,\n  $align: null,\n  $gapRow: null,\n  $gapCol: null\n) {\n  display: flex;\n  @if $direction == wrap {\n    flex-wrap: $direction;\n  } @else if index(column row null, $direction) {\n    flex-direction: $direction;\n  } @else {\n    @include error('errFlex');\n  }\n  @if type-of($gapVal) == 'number' and index('px' 'em' 'rem', unit($gapVal)) {\n    gap: $gapVal;\n  } @else if $gapVal == null {\n  } @else {\n    @include error('errFlex');\n  }\n  @if type-of($gapRow) == 'number' and index('px' 'em' 'rem', unit($gapRow)) {\n    row-gap: $gapRow;\n  } @else if $gapRow == null {\n  } @else {\n    @include error('errFlex');\n  }\n  @if type-of($gapCol) == 'number' and index('px' 'em' 'rem', unit($gapCol)) {\n    column-gap: $gapCol;\n  } @else if $gapCol == null {\n  } @else {\n    @include error('errFlex');\n  }\n  @if index($justifyContent, $justify) {\n    justify-content: $justify;\n  } @else {\n    @include error('errFlex');\n  }\n  @if index($alignItems, $align) {\n    align-items: $align;\n  } @else {\n    @include error('errFlex');\n  }\n}\n\n@mixin basis($elementNr, $gapVal) {\n  $check: 1;\n  @if type-of($elementNr) == 'number' and index('', unit($elementNr)) {\n  } @else {\n    $check: 0;\n  }\n  @if type-of($gapVal) == 'number' and index('px' 'em' 'rem', unit($gapVal)) {\n  } @else {\n    $check: 0;\n  }\n  @if $check == 1 {\n    flex-basis: calc((100% - #{$gapVal * ($elementNr - 1)}) / #{$elementNr});\n  } @else {\n    @include error('errFlex');\n  }\n}\n"],"names":[],"sourceRoot":""}